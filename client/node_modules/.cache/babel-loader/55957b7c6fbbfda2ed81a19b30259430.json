{"ast":null,"code":"var _jsxFileName = \"/home/evan/Desktop/Cyber-Threat-Visualization/client/src/VisualizationMap.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nconst REACT_APP_GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\nclass VisualizationMap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ip_addresses: [],\n      location_data: [],\n      done_loading_data: false\n    };\n\n    this.fetchDataForIPs = async () => {\n      let all_ips = null;\n      let all_location_data = null;\n      await axios.get(\"http://localhost:5000/fetch_ips\").then(response => {\n        all_ips = response.data;\n        console.log(\"all_ips = \" + all_ips);\n        all_location_data = [];\n        all_ips.map(ip => {\n          axios.get(\"http://localhost:5000/fetch_data_by_ip/\" + ip).then(response => {\n            console.log(response.data);\n            all_location_data.push(response.data);\n            this.setState({\n              ip_addresses: all_ips,\n              location_data: all_location_data\n            });\n          }).catch();\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchDataForIPs();\n  }\n\n  render() {\n    return React.createElement(Map, {\n      google: this.props.google,\n      zoom: 8,\n      style: mapStyles,\n      initialCenter: {\n        lat: 47.444,\n        lng: -122.176\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      position: {\n        lat: 48.00,\n        lng: -122.00\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: REACT_APP_GOOGLE_MAPS_API_KEY\n})(VisualizationMap); // call fetchIPs to get list of all 100 IP addresses\n// in .then of that axios call, map over IPs and hit backend again using fetch_data_by_ip endpoint","map":{"version":3,"sources":["/home/evan/Desktop/Cyber-Threat-Visualization/client/src/VisualizationMap.js"],"names":["React","Component","axios","Map","GoogleApiWrapper","Marker","REACT_APP_GOOGLE_MAPS_API_KEY","process","env","VisualizationMap","state","ip_addresses","location_data","done_loading_data","fetchDataForIPs","all_ips","all_location_data","get","then","response","data","console","log","map","ip","push","setState","catch","componentDidMount","render","props","google","mapStyles","lat","lng","apiKey"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,gBAAd,EAAgCC,MAAhC,QAA8C,mBAA9C;AAGA,MAAMC,6BAA6B,GAAGC,OAAO,CAACC,GAAR,CAAYF,6BAAlD;;AAEA,MAAMG,gBAAN,SAA+BR,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACrCS,KADqC,GAC7B;AACJC,MAAAA,YAAY,EAAE,EADV;AAEJC,MAAAA,aAAa,EAAE,EAFX;AAGJC,MAAAA,iBAAiB,EAAE;AAHf,KAD6B;;AAAA,SAWrCC,eAXqC,GAWnB,YAAY;AAC1B,UAAIC,OAAO,GAAG,IAAd;AACA,UAAIC,iBAAiB,GAAG,IAAxB;AACA,YAAMd,KAAK,CACNe,GADC,CACG,iCADH,EAGDC,IAHC,CAGIC,QAAQ,IAAI;AACdJ,QAAAA,OAAO,GAAGI,QAAQ,CAACC,IAAnB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAeP,OAA3B;AAEAC,QAAAA,iBAAiB,GAAG,EAApB;AACAD,QAAAA,OAAO,CAACQ,GAAR,CAAYC,EAAE,IAAI;AACdtB,UAAAA,KAAK,CACAe,GADL,CACS,4CAA4CO,EADrD,EAEKN,IAFL,CAEUC,QAAQ,IAAI;AACdE,YAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAArB;AACAJ,YAAAA,iBAAiB,CAACS,IAAlB,CAAuBN,QAAQ,CAACC,IAAhC;AAEA,iBAAKM,QAAL,CAAc;AACVf,cAAAA,YAAY,EAAEI,OADJ;AAEVH,cAAAA,aAAa,EAAEI;AAFL,aAAd;AAKH,WAXL,EAYKW,KAZL;AAaH,SAdD;AAeH,OAvBC,CAAN;AAwBH,KAtCoC;AAAA;;AAOrCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKd,eAAL;AACH;;AA+BDe,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,GAAD;AACI,MAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,MADvB;AAEI,MAAA,IAAI,EAAE,CAFV;AAGI,MAAA,KAAK,EAAEC,SAHX;AAII,MAAA,aAAa,EAAE;AAAEC,QAAAA,GAAG,EAAE,MAAP;AAAeC,QAAAA,GAAG,EAAE,CAAC;AAArB,OAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE;AAAED,QAAAA,GAAG,EAAE,KAAP;AAAcC,QAAAA,GAAG,EAAE,CAAC;AAApB,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAUH;;AAnDoC;;AAsDzC,eAAe9B,gBAAgB,CAAC;AAC5B+B,EAAAA,MAAM,EAAE7B;AADoB,CAAD,CAAhB,CAEZG,gBAFY,CAAf,C,CAKA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\n\nconst REACT_APP_GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n\nclass VisualizationMap extends Component {\n    state = {\n        ip_addresses: [],\n        location_data: [],\n        done_loading_data: false\n    };\n\n    componentDidMount() {\n        this.fetchDataForIPs();\n    }\n\n    fetchDataForIPs = async () => {\n        let all_ips = null\n        let all_location_data = null\n        await axios\n            .get(\"http://localhost:5000/fetch_ips\")\n\n            .then(response => {\n                all_ips = response.data\n                console.log(\"all_ips = \" + all_ips);\n\n                all_location_data = []\n                all_ips.map(ip => {\n                    axios\n                        .get(\"http://localhost:5000/fetch_data_by_ip/\" + ip)\n                        .then(response => {\n                            console.log(response.data)\n                            all_location_data.push(response.data)\n\n                            this.setState({\n                                ip_addresses: all_ips,\n                                location_data: all_location_data\n                            })\n\n                        })\n                        .catch()\n                })\n            })\n    }\n\n    render() {\n        return (\n            <Map\n                google={this.props.google}\n                zoom={8}\n                style={mapStyles}\n                initialCenter={{ lat: 47.444, lng: -122.176}}\n            >\n                <Marker position={{ lat: 48.00, lng: -122.00}} />\n            </Map>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: REACT_APP_GOOGLE_MAPS_API_KEY\n})(VisualizationMap);\n\n\n// call fetchIPs to get list of all 100 IP addresses\n// in .then of that axios call, map over IPs and hit backend again using fetch_data_by_ip endpoint\n"]},"metadata":{},"sourceType":"module"}