{"ast":null,"code":"var _jsxFileName = \"/home/evan/Desktop/Cyber-Threat-Visualization/client/src/IPAddresses.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport VisualizationMap from \"./VisualizationMap\";\n\nclass IPAddresses extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ip_addresses: [],\n      location_data: [],\n      lats_and_longs: []\n    };\n\n    this.fetchDataForIPs = async () => {\n      let all_ips = null;\n      let all_location_data = null;\n      let all_lats_and_longs = null;\n      await axios.get(\"http://localhost:5000/fetch_ips\").then(response => {\n        all_ips = response.data;\n        console.log(\"all_ips = \" + all_ips);\n        all_location_data = [];\n        all_lats_and_longs = [];\n        all_ips.map(ip => {\n          axios.get(\"http://localhost:5000/fetch_data_by_ip_old/\" + ip).then(response => {\n            console.log(response.data);\n            all_location_data.push(response.data);\n            let temp_lat = response.data.latitude;\n            let temp_long = response.data.longitude;\n            let temp_lat_and_long = {\n              latitude: temp_lat,\n              longitude: temp_long\n            };\n            all_lats_and_longs.push(temp_lat_and_long);\n            this.setState({\n              ip_addresses: all_ips,\n              location_data: all_location_data,\n              lats_and_longs: all_lats_and_longs\n            });\n          }).catch();\n          return \"\";\n        });\n      });\n    };\n  }\n\n  componentDidMount() {// this.fetchDataForIPs();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.fetchDataForIPs(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Populate Map\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.ip_addresses.length > 0 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"First IP: \", this.state.ip_addresses[0]) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), this.state.location_data.length > 0 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"First Lat/Long: \", this.state.location_data[0].latitude + \", \" + this.state.location_data[0].longitude) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.lats_and_longs.length > 0 ? React.createElement(VisualizationMap, {\n      location_data: this.state.lats_and_longs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default IPAddresses; // call fetchIPs to get list of all 100 IP addresses\n// in .then of that axios call, map over IPs and hit backend again using fetch_data_by_ip endpoint","map":{"version":3,"sources":["/home/evan/Desktop/Cyber-Threat-Visualization/client/src/IPAddresses.js"],"names":["React","Component","axios","VisualizationMap","IPAddresses","state","ip_addresses","location_data","lats_and_longs","fetchDataForIPs","all_ips","all_location_data","all_lats_and_longs","get","then","response","data","console","log","map","ip","push","temp_lat","latitude","temp_long","longitude","temp_lat_and_long","setState","catch","componentDidMount","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport VisualizationMap from \"./VisualizationMap\";\n\nclass IPAddresses extends Component {\n    state = {\n        ip_addresses: [],\n        location_data: [],\n        lats_and_longs: []\n    };\n\n    componentDidMount() {\n        // this.fetchDataForIPs();\n    }\n\n    fetchDataForIPs = async () => {\n        let all_ips = null\n        let all_location_data = null\n        let all_lats_and_longs = null\n        await axios\n            .get(\"http://localhost:5000/fetch_ips\")\n\n            .then(response => {\n                all_ips = response.data\n                console.log(\"all_ips = \" + all_ips);\n\n                all_location_data = []\n                all_lats_and_longs = []\n                all_ips.map(ip => {\n                    axios\n                        .get(\"http://localhost:5000/fetch_data_by_ip_old/\" + ip)\n                        .then(response => {\n                            console.log(response.data)\n                            all_location_data.push(response.data)\n\n                            let temp_lat = response.data.latitude\n                            let temp_long = response.data.longitude\n\n                            let temp_lat_and_long = {\n                                latitude: temp_lat,\n                                longitude: temp_long\n                            }\n\n                            all_lats_and_longs.push(temp_lat_and_long)\n\n                            this.setState({\n                                ip_addresses: all_ips,\n                                location_data: all_location_data,\n                                lats_and_longs: all_lats_and_longs\n                            })\n\n\n\n                        })\n                        .catch()\n                         return \"\"\n\n                })\n            })\n    }\n\n    render() {\n        return (\n            <div>\n\n                <button onClick={this.fetchDataForIPs()}>Populate Map</button>\n\n\n                <div>\n                    {this.state.ip_addresses.length > 0 ? <p>First IP: {this.state.ip_addresses[0]}</p> : <div/>}\n                    {this.state.location_data.length > 0 ?\n                        <p>\n                            First Lat/Long: {this.state.location_data[0].latitude + \", \" +\n                            this.state.location_data[0].longitude}\n                        </p>\n                        : <div/>}\n                </div>\n\n                <div>\n                    {this.state.lats_and_longs.length > 0 ?\n                        <VisualizationMap location_data={this.state.lats_and_longs}/> : <div/>}\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default IPAddresses;\n\n\n// call fetchIPs to get list of all 100 IP addresses\n// in .then of that axios call, map over IPs and hit backend again using fetch_data_by_ip endpoint\n"]},"metadata":{},"sourceType":"module"}