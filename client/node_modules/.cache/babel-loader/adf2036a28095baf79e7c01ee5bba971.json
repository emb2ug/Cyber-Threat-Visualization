{"ast":null,"code":"var _jsxFileName = \"/home/evan/Desktop/Cyber-Threat-Visualization/client/src/IPAddresses.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass IPAddresses extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ip_addresses: []\n    };\n\n    this.oldFetchIPs = async () => {\n      await axios.get(\"https://cors-anywhere.herokuapp.com/api.cybercure.ai/feed/get_ips\").then(response => {\n        //let first_ip = response.data.data.ip[0];\n        let all_ips = response.data.data.ip;\n        console.log(\"all_ips = \" + all_ips);\n        this.setState({\n          ip_addresses: all_ips\n        });\n      });\n    };\n\n    this.fetchIps = async () => {\n      await axios.get(\"http://localhost:5000/fetch_ips\").then(response => {\n        //let first_ip = response.data.data.ip[0];\n        let all_ips = response.data.data.ip;\n        console.log(\"all_ips = \" + all_ips);\n        this.setState({\n          ip_addresses: all_ips\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchIPs();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, this.state.ip_addresses.length > 0 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"First IP: \", this.state.ip_addresses[0]) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default IPAddresses;","map":{"version":3,"sources":["/home/evan/Desktop/Cyber-Threat-Visualization/client/src/IPAddresses.js"],"names":["React","Component","axios","IPAddresses","state","ip_addresses","oldFetchIPs","get","then","response","all_ips","data","ip","console","log","setState","fetchIps","componentDidMount","fetchIPs","render","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BF,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCG,KADgC,GACxB;AACJC,MAAAA,YAAY,EAAE;AADV,KADwB;;AAAA,SAShCC,WATgC,GASlB,YAAY;AAEtB,YAAMJ,KAAK,CACNK,GADC,CACG,mEADH,EAGDC,IAHC,CAGIC,QAAQ,IAAI;AACd;AACA,YAAIC,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBC,EAAjC;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAeJ,OAA3B;AAEA,aAAKK,QAAL,CAAc;AACVV,UAAAA,YAAY,EAAEK;AADJ,SAAd;AAGH,OAXC,CAAN;AAYH,KAvB+B;;AAAA,SAyBhCM,QAzBgC,GAyBrB,YAAY;AACnB,YAAMd,KAAK,CACNK,GADC,CACG,iCADH,EAGDC,IAHC,CAGIC,QAAQ,IAAI;AACd;AACA,YAAIC,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBC,EAAjC;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAeJ,OAA3B;AAEA,aAAKK,QAAL,CAAc;AACVV,UAAAA,YAAY,EAAEK;AADJ,SAAd;AAGH,OAXC,CAAN;AAYH,KAtC+B;AAAA;;AAKhCO,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL;AACH;;AAiCDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKf,KAAL,CAAWC,YAAX,CAAwBe,MAAxB,GAAiC,CAAjC,GAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAc,KAAKhB,KAAL,CAAWC,YAAX,CAAwB,CAAxB,CAAd,CAArC,GAAqF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD1F,CADJ;AAKH;;AA9C+B;;AAiDpC,eAAeF,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\n\nclass IPAddresses extends Component {\n    state = {\n        ip_addresses: []\n    };\n\n    componentDidMount() {\n        this.fetchIPs();\n    }\n\n    oldFetchIPs = async () => {\n\n        await axios\n            .get(\"https://cors-anywhere.herokuapp.com/api.cybercure.ai/feed/get_ips\")\n\n            .then(response => {\n                //let first_ip = response.data.data.ip[0];\n                let all_ips = response.data.data.ip;\n                console.log(\"all_ips = \" + all_ips);\n\n                this.setState({\n                    ip_addresses: all_ips\n                })\n            });\n    };\n\n    fetchIps = async () => {\n        await axios\n            .get(\"http://localhost:5000/fetch_ips\")\n\n            .then(response => {\n                //let first_ip = response.data.data.ip[0];\n                let all_ips = response.data.data.ip;\n                console.log(\"all_ips = \" + all_ips);\n\n                this.setState({\n                    ip_addresses: all_ips\n                })\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.ip_addresses.length > 0 ? <p>First IP: {this.state.ip_addresses[0]}</p> : <div/>}\n            </div>\n        );\n    }\n}\n\nexport default IPAddresses;\n"]},"metadata":{},"sourceType":"module"}